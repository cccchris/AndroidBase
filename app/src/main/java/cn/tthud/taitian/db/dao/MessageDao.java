package cn.tthud.taitian.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.tthud.taitian.db.entity.Message;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE".
*/
public class MessageDao extends AbstractDao<Message, Long> {

    public static final String TABLENAME = "MESSAGE";

    /**
     * Properties of entity Message.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Msg_id = new Property(1, String.class, "msg_id", false, "MSG_ID");
        public final static Property Isread = new Property(2, String.class, "isread", false, "ISREAD");
        public final static Property Readtime = new Property(3, String.class, "readtime", false, "READTIME");
        public final static Property Istop = new Property(4, String.class, "istop", false, "ISTOP");
        public final static Property Mc_id = new Property(5, String.class, "mc_id", false, "MC_ID");
        public final static Property Icon = new Property(6, String.class, "icon", false, "ICON");
        public final static Property Url = new Property(7, String.class, "url", false, "URL");
        public final static Property Title = new Property(8, String.class, "title", false, "TITLE");
        public final static Property Ishref = new Property(9, String.class, "ishref", false, "ISHREF");
        public final static Property Suetime = new Property(10, long.class, "suetime", false, "SUETIME");
        public final static Property Type = new Property(11, String.class, "type", false, "TYPE");
        public final static Property Module = new Property(12, String.class, "module", false, "MODULE");
        public final static Property Module_id = new Property(13, String.class, "module_id", false, "MODULE_ID");
    }


    public MessageDao(DaoConfig config) {
        super(config);
    }
    
    public MessageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"MSG_ID\" TEXT," + // 1: msg_id
                "\"ISREAD\" TEXT," + // 2: isread
                "\"READTIME\" TEXT," + // 3: readtime
                "\"ISTOP\" TEXT," + // 4: istop
                "\"MC_ID\" TEXT," + // 5: mc_id
                "\"ICON\" TEXT," + // 6: icon
                "\"URL\" TEXT," + // 7: url
                "\"TITLE\" TEXT," + // 8: title
                "\"ISHREF\" TEXT," + // 9: ishref
                "\"SUETIME\" INTEGER NOT NULL ," + // 10: suetime
                "\"TYPE\" TEXT," + // 11: type
                "\"MODULE\" TEXT," + // 12: module
                "\"MODULE_ID\" TEXT);"); // 13: module_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String msg_id = entity.getMsg_id();
        if (msg_id != null) {
            stmt.bindString(2, msg_id);
        }
 
        String isread = entity.getIsread();
        if (isread != null) {
            stmt.bindString(3, isread);
        }
 
        String readtime = entity.getReadtime();
        if (readtime != null) {
            stmt.bindString(4, readtime);
        }
 
        String istop = entity.getIstop();
        if (istop != null) {
            stmt.bindString(5, istop);
        }
 
        String mc_id = entity.getMc_id();
        if (mc_id != null) {
            stmt.bindString(6, mc_id);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(7, icon);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(8, url);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(9, title);
        }
 
        String ishref = entity.getIshref();
        if (ishref != null) {
            stmt.bindString(10, ishref);
        }
        stmt.bindLong(11, entity.getSuetime());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(12, type);
        }
 
        String module = entity.getModule();
        if (module != null) {
            stmt.bindString(13, module);
        }
 
        String module_id = entity.getModule_id();
        if (module_id != null) {
            stmt.bindString(14, module_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Message entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String msg_id = entity.getMsg_id();
        if (msg_id != null) {
            stmt.bindString(2, msg_id);
        }
 
        String isread = entity.getIsread();
        if (isread != null) {
            stmt.bindString(3, isread);
        }
 
        String readtime = entity.getReadtime();
        if (readtime != null) {
            stmt.bindString(4, readtime);
        }
 
        String istop = entity.getIstop();
        if (istop != null) {
            stmt.bindString(5, istop);
        }
 
        String mc_id = entity.getMc_id();
        if (mc_id != null) {
            stmt.bindString(6, mc_id);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(7, icon);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(8, url);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(9, title);
        }
 
        String ishref = entity.getIshref();
        if (ishref != null) {
            stmt.bindString(10, ishref);
        }
        stmt.bindLong(11, entity.getSuetime());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(12, type);
        }
 
        String module = entity.getModule();
        if (module != null) {
            stmt.bindString(13, module);
        }
 
        String module_id = entity.getModule_id();
        if (module_id != null) {
            stmt.bindString(14, module_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Message readEntity(Cursor cursor, int offset) {
        Message entity = new Message( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // msg_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // isread
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // readtime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // istop
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mc_id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // icon
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // url
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // title
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ishref
            cursor.getLong(offset + 10), // suetime
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // type
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // module
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // module_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Message entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMsg_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsread(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setReadtime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIstop(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMc_id(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIcon(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTitle(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIshref(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSuetime(cursor.getLong(offset + 10));
        entity.setType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setModule(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setModule_id(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Message entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Message entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Message entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
